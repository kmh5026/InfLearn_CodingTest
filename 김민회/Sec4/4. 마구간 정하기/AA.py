
# 마구간 정하기 (결정 알고리즘) *****

'''
# 결정 알고리즘의 특징 
: 특정 범위 안에 답이 있다 
: 중간 지점 / 좌한 / 우한 설정 >> 이분탐색 
'''

import sys 
sys.stdin = open('/Users/kimmh/Desktop/Algorithm/Sec4/4. 마구간 정하기/in5.txt', 'rt') 

#--------------------------------------------------------------------------------# 
# 1. N개의 마구간 (수직선상에 x1, x2, ... , xN 좌표) (중복 X) 
# 2. C마리의 말 
# 3. 각 마구간에는 한 마리의 말만 / "가장 가까운 두 말의 거리"가 최대한 크도록 배치 
# 
# 입력1) N, C (N은 3 이상 20만 이하, C는 2 이상 N 이하) 
# 입력2) N개 줄에 걸쳐 각 마구간의 좌표 xi (0이상 10억 이하) 
# 출력) 가장 가까운 두 말의 "최대 거리" 
#--------------------------------------------------------------------------------# 

N, C = map(int, input().split()) 

line = [] 
for _ in range(N): 
    line.append(int(input())) 

line.sort()         # 이분탐색을 위해 정렬 

# C = 3 
# 1 2 4 8 9 

lt = 1              # 좌한 = 거리 최소 
rt = line[N-1]      # 우한 = 가장 끝 좌표 


### 주어진 '최소 거리'에 의해 배치된 말 수 
def Count(dist): 
    cnt = 1             # 말 마리 수 초기화 
    horse = line[0]     # 첫 말의 좌표 

    for i in range(1, N):            # 두번째 말부터 마지막까지 거리 비교 
        if line[i] - horse >= dist:  # 주어진 거리 만족 
            cnt += 1 
            horse = line[i]          # 말 배치 (기준 말 교체) 

    return cnt                       # 배치된 말의 수 


### 이분탐색 (결정알고리즘) 
while lt <= rt:                      # 최소거리의 "최대" 지점 
    mid = (lt + rt) // 2 

    if Count(mid) >= C:              # 주어진 말 배치 가능 
        result = mid                 # 일단 최소거리 저장 
        lt = mid + 1                 # 최소거리 늘릴 수 있는지 확인 위해 

    else:  # Count(mid) < C          # 주어진 말 배치 불가능 (최소거리가 너무 큼) 
        rt = mid - 1                 # 최소거리 축소 

print(result) 


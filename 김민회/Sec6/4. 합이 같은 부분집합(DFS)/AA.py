
# 부분집합 구하기 (DFS) ***** 

import sys 
sys.stdin = open('/Users/kimmh/Desktop/Algorithm/Sec6/4. 합이 같은 부분집합/in4.txt', 'rt') 

#--------------------------------------------------------------------------------# 
# 1. N개의 원소로 구성된 자연수 집합 
# 2. 2개의 부분집합으로 나눴을 때 각 원소 합이 같은 경우가 존재하면 'YES', 존재하지 않으면 'NO' 출력 
# 3. 두 부분집합은 서로소 집합 (disjoint) 
# 
# 입력1) N (1 이상 10 이하) 
# 입력2) 원소 N개 (중복 X) 
# 출력) YES / NO 
#--------------------------------------------------------------------------------# 

# 원소 N개만큼 0 리스트 만들어서 각 원소 i에 대해 +i / -i 로 두 부분집합을 구분..? 
# sum(리스트) == 0 이면 YES, 아니면 NO 


### YES인 경우는 맞음 / But, NO인 경우는 어떻게...?  >>> 재귀함수 호출 이후에 print('NO') 
def DFS(v): 
    if v == N+1:            # 말단 노드(N+1)에 도착할 때마다 >>> 1 ~ N까지 포함 여부를 (check 기준으로) 출력 
        if sum(check)==0:   # 두 부분집합의 합이 같다면, 
            print('YES') 
            sys.exit(0)     ### 함수 종료 (소스코드) 
    
    else: 
        check[v-1] = og[v-1]    # 왼부분집합은  (+)
        DFS(v+1)                #   다음 노드로 
        check[v-1] = -og[v-1]   # 오른부분집합은 (-) 
        DFS(v+1)                #   다음 노드로 


if __name__ == '__main__': 
    N = int(input()) 
    og = list( map(int, input().split()) )  
    check = [0] * (N)  # 1 ~ N까지의 원소 (층)  
    DFS(1) 

    print('NO')        # 말단 노드까지 다 가고나서 아무런 동작('YES')을 하지 못한 경우를 의미 

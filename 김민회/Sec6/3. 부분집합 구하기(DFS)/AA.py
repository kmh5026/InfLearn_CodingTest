
# 부분집합 구하기 (DFS) ***** 

import sys 
sys.stdin = open('/Users/kimmh/Desktop/Algorithm/Sec6/3. 부분집합 구하기/in5.txt', 'rt') 

#--------------------------------------------------------------------------------# 
# 1. 자연수 N 입력 
# 2. 1부터 N까지의 원소를 갖는 집합의 부분집합을 모두 출력 
# 
# 입력) N (1 이상 10 이하) 
# 출력) 각 줄에 하나씩 부분집합 
#--------------------------------------------------------------------------------# 

# 순서 : 1 포함되는 부분집합 모두 (길이 내림차순)       [123] [12 ] [1 3] [1  ] 
#       2 포함되는 부분집합 모두 (1 포함 제외)        [ 23] [ 2 ] 
#           ... 
#       N-1 포함되는 부분집합 모두 (N-2 포함 제외) 
#       N 하나                                 [  3] 

# 부분집합 개수는 2^N - 1 (공집합 제외) 
# 이진트리의 개념으로 연결!! 


# DFS(1) 부터 시작, 가지는 1이 포함 되나 안 되나, 다음 노드는 DFS(2), 그 다음은 DFS(3) 
# 순회는 1이 포함되는 것으로 시작 (왼쪽 가지) 

##### 상태트리 ##### 

def DFS(v): 
    if v == N+1:        # 말단 노드(N+1)에 도착할 때마다 >>> 1 ~ N까지 포함 여부를 (check 기준으로) 출력 
        for i in range(1, N+1): 
            if check[i] == 1: 
                print(i, end=' ') 
        print() 
    
    else: 
        check[v] = 1    # v 포함하는 경우 
        DFS(v+1)        #   다음 노드로 
        check[v] = 0    # v 포함하지 않는 경우 
        DFS(v+1)        #   다음 노드로 


if __name__ == '__main__': 
    N = int(input()) 
    check = [0] * (N+1)  # 1 ~ N까지의 숫자 (인덱스) 
    DFS(1) 
